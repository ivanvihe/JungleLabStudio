       # visuals/visualizer_manager.py
    2: import logging
    2: import importlib
    2: import os
    2: import sys
    2: from pathlib import Path
       
    4: class VisualizerManager:
    2:     def __init__(self):
    1:         self.visualizers = {}
    1:         self.load_visualizers()
       
    2:     def load_visualizers(self):
               """Load all visualizer modules from the visuals directory"""
    1:         try:
                   # Get the directory where this file is located
    1:             current_dir = Path(__file__).parent
    1:             presets_dir = current_dir / "presets"
    1:             logging.info(f"üîç Loading visualizers from: {presets_dir}")
                   
                   # List of visualizer modules to load (in order of preference)
    1:             visualizer_modules = [
                       'simple_test',        # Simple test visualizer (should always work)
                       'intro_background',    # Intro background visualizer
                       'intro_text_robotica', # Intro text overlay
                       'wire_terrain',       # Wire terrain
                       'abstract_lines',     # Abstract lines
                       'geometric_particles',
                       'evolutive_particles',
                       'abstract_shapes',
                       'mobius_band',
                       'building_madness',
                       'cosmic_flow',
                       'fluid_particles',
                       'vortex_particles',
                       'kaleido_tunney',
                       'science_analyzer',
                       'oneshot_charactertrain',
                       'oneshot_boomexplosion',
                       'oneshot_circuit_signal',
                       'oneshot_electric_boom',
                   ]
                   
    1:             loaded_count = 0
    1:             failed_modules = []
                   
   20:             for module_name in visualizer_modules:
   19:                 try:
                           # Check if file exists
   19:                     module_file = presets_dir / f"{module_name}.py"
   19:                     if not module_file.exists():
                               logging.debug(f"‚ö†Ô∏è Module file not found: {module_file}")
                               continue
                           
                           # Import the module
   19:                     full_module_name = f"visuals.presets.{module_name}"
                           
                           # Force reload if already imported
   19:                     if full_module_name in sys.modules:
                               module = importlib.reload(sys.modules[full_module_name])
                           else:
   19:                         module = importlib.import_module(full_module_name)
                           
                           # Find the visualizer class in the module
   19:                     visualizer_class = None
   19:                     visualizer_name = None
                           
26179:                     for attr_name in dir(module):
26179:                         attr = getattr(module, attr_name)
                               
                               # Check if it's a class that inherits from BaseVisualizer
26179:                         if (isinstance(attr, type) and 
  784:                             hasattr(attr, 'visual_name') and 
   36:                             attr_name != 'BaseVisualizer'):
                                   
   19:                             visualizer_class = attr
   19:                             visualizer_name = attr.visual_name
   19:                             break
                           
   19:                     if visualizer_class and visualizer_name:
   19:                         self.visualizers[visualizer_name] = visualizer_class
   19:                         loaded_count += 1
   19:                         logging.info(f"‚úÖ Loaded visualizer: {visualizer_name} from {module_name}")
                           else:
                               logging.warning(f"‚ö†Ô∏è No visualizer class found in {module_name}")
                               failed_modules.append(module_name)
                               
                       except ImportError as e:
                           logging.error(f"‚ùå Failed to import {module_name}: {e}")
                           failed_modules.append(module_name)
                       except Exception as e:
                           logging.error(f"‚ùå Error loading {module_name}: {e}")
                           failed_modules.append(module_name)
                   
                   # Log summary
    1:             logging.info(f"üìä Visualizer loading complete:")
    1:             logging.info(f"   ‚úÖ Successfully loaded: {loaded_count} visualizers")
    1:             if failed_modules:
                       logging.info(f"   ‚ùå Failed to load: {failed_modules}")
                   
                   # List all loaded visualizers
    1:             if self.visualizers:
    1:                 logging.info(f"üìã Available visualizers:")
   20:                 for name in self.visualizers.keys():
   19:                     logging.info(f"   ‚Ä¢ {name}")
                   else:
                       logging.error("‚ùå No visualizers loaded! Application may not work correctly.")
                       
                       # Try to create at least a fallback visualizer
                       self._create_fallback_visualizer()
                       
               except Exception as e:
                   logging.error(f"‚ùå Critical error in load_visualizers: {e}")
                   import traceback
                   traceback.print_exc()
                   
                   # Create fallback
                   self._create_fallback_visualizer()
       
    2:     def _create_fallback_visualizer(self):
               """Create a minimal fallback visualizer"""
               try:
                   logging.info("üõ†Ô∏è Creating fallback visualizer...")
                   
                   from .base_visualizer import BaseVisualizer
                   from OpenGL.GL import glClearColor, glClear, GL_COLOR_BUFFER_BIT
                   import time
                   import math
                   
                   class FallbackVisualizer(BaseVisualizer):
                       visual_name = "Fallback"
                       
                       def __init__(self):
                           super().__init__()
                           self.start_time = time.time()
                       
                       def initializeGL(self):
                           glClearColor(0.0, 0.0, 0.0, 0.0)
                       
                       def paintGL(self):
                           t = time.time() - self.start_time
                           r = 0.5 + 0.5 * math.sin(t)
                           g = 0.5 + 0.5 * math.sin(t + 2.094)
                           b = 0.5 + 0.5 * math.sin(t + 4.189)
                           glClearColor(r * 0.3, g * 0.3, b * 0.3, 0.8)
                           glClear(GL_COLOR_BUFFER_BIT)
                       
                       def get_controls(self):
                           return {}
                   
                   self.visualizers["Fallback"] = FallbackVisualizer
                   logging.info("‚úÖ Fallback visualizer created")
                   
               except Exception as e:
                   logging.error(f"‚ùå Failed to create fallback visualizer: {e}")
       
    2:     def get_visualizer_names(self):
               """Get list of available visualizer names"""
    1:         names = list(self.visualizers.keys())
    1:         logging.debug(f"üìã Available visualizers: {names}")
    1:         return names
       
    2:     def get_visualizer_class(self, name):
               """Get visualizer class by name"""
    8:         visualizer_class = self.visualizers.get(name)
    8:         if visualizer_class:
    8:             logging.debug(f"‚úÖ Found visualizer class for: {name}")
               else:
                   logging.error(f"‚ùå Visualizer not found: {name}")
                   # Return fallback if available
                   if "Fallback" in self.visualizers:
                       logging.warning(f"‚ö†Ô∏è Using fallback visualizer instead of {name}")
                       return self.visualizers["Fallback"]
    8:         return visualizer_class
       
    2:     def create_visualizer(self, name):
               """Create an instance of a visualizer by name"""
               visualizer_class = self.get_visualizer_class(name)
               if visualizer_class:
                   try:
                       instance = visualizer_class()
                       logging.info(f"‚úÖ Created instance of {name}")
                       return instance
                   except Exception as e:
                       logging.error(f"‚ùå Failed to create instance of {name}: {e}")
                       import traceback
                       traceback.print_exc()
               return None
       
    2:     def reload_visualizers(self):
               """Reload all visualizers (useful for development)"""
               logging.info("üîÑ Reloading all visualizers...")
               self.visualizers.clear()
               self.load_visualizers()
