       # TODO: migrate to RenderBackend (ModernGL)
       # visuals/presets/oneshot_charactertrain.py
    1: import logging
    1: import numpy as np
    1: import ctypes
    1: import time
    1: import math
    1: import random
    1: import string
    1: from OpenGL.GL import *
    1: from ..base_visualizer import BaseVisualizer
       
    2: class OneshotCharacterTrainVisualizer(BaseVisualizer):
    1:     """One-shot character train visual - ULTRA SIMPLE VERSION"""
           
    1:     visual_name = "Oneshot Character Train"
           
    1:     def __init__(self):
               super().__init__()
               self.shader_program = None
               self.vao = None
               self.vbo = None
               self.start_time = time.time()
               self.initialized = False
               
               # Train state - VERY SIMPLE
               self.active_trains = []
               self.max_trains = 3
               
               # Visual parameters
               self.speed_multiplier = 1.0
               self.trail_intensity = 1.0
               self.color_mode = 0
       
               # Character set
               self.charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
               
               # Pre-generate data
               self.vertices = None
               self.vertex_count = 0
               
               logging.info("OneshotCharacterTrainVisualizer created")
               
               # Auto-trigger the train on creation for one-shot behavior
               self.create_train()
               
               # Auto-trigger the train on creation for one-shot behavior
               self.create_train()
       
    1:     def initializeGL(self):
               """Initialize OpenGL resources - EXACTLY like intro_background"""
               try:
                   logging.debug("OneshotCharacterTrainVisualizer.initializeGL called")
                   
                   # Clear any existing GL errors
                   while glGetError() != GL_NO_ERROR:
                       pass
                   
                   # Set up OpenGL state - EXACTLY like intro_background
                   glClearColor(0.0, 0.0, 0.0, 0.0)
                   glEnable(GL_BLEND)
                   glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
                   glDisable(GL_DEPTH_TEST)
                   
                   # Load shaders
                   if not self.load_shaders():
                       logging.error("Failed to load shaders")
                       return
                   
                   # Setup geometry
                   if not self.setup_geometry():
                       logging.error("Failed to setup geometry")
                       return
                   
                   self.initialized = True
                   logging.info("âœ… OneshotCharacterTrainVisualizer initialized successfully")
                   
               except Exception as e:
                   logging.error(f"Error in OneshotCharacterTrainVisualizer.initializeGL: {e}")
                   import traceback
                   traceback.print_exc()
       
    1:     def load_shaders(self):
               """Load and compile shaders - ULTRA SIMPLE like intro_background"""
               try:
                   # VERY SIMPLE vertex shader - based on intro_background pattern
                   vertex_shader_source = """
                   #version 330 core
                   layout (location = 0) in vec2 aPos;
                   layout (location = 1) in vec2 aTexCoord;
                   layout (location = 2) in float aChar;
                   layout (location = 3) in float aAge;
                   layout (location = 4) in vec3 aColor;
                   
                   uniform float time;
                   uniform float intensity;
                   
                   out vec2 texCoord;
                   out float charCode;
                   out vec3 color;
                   out float alpha;
                   
                   void main()
                   {
                       gl_Position = vec4(aPos, 0.0, 1.0);
                       texCoord = aTexCoord;
                       charCode = aChar;
                       color = aColor;
                       
                       // Simple fade based on age
                       float fade = 1.0 - smoothstep(0.0, 4.0, aAge);
                       alpha = fade * intensity;
                   }
                   """
                   
                   # VERY SIMPLE fragment shader - based on intro_background
                   fragment_shader_source = """
                   #version 330 core
                   in vec2 texCoord;
                   in float charCode;
                   in vec3 color;
                   in float alpha;
                   
                   out vec4 FragColor;
                   
                   // Simple character rendering function - like intro_background
                   float drawChar(vec2 uv, float c) {
                       vec2 p = uv * 2.0 - 1.0; // Convert to -1,1 range
                       
                       float char_alpha = 0.0;
                       
                       // Different patterns for different character codes
                       float char_mod = mod(c, 6.0);
                       
                       if (char_mod < 2.0) {
                           // Rectangle pattern
                           char_alpha = step(abs(p.x), 0.6) * step(abs(p.y), 0.8);
                       } else if (char_mod < 4.0) {
                           // Circle pattern
                           char_alpha = 1.0 - smoothstep(0.4, 0.6, length(p));
                       } else {
                           // Cross pattern
                           char_alpha = step(abs(p.x), 0.2) + step(abs(p.y), 0.2);
                       }
                       
                       return clamp(char_alpha, 0.0, 1.0);
                   }
                   
                   void main()
                   {
                       float char_alpha = drawChar(texCoord, charCode);
                       FragColor = vec4(color, char_alpha * alpha);
                   }
                   """
                   
                   # Compile exactly like intro_background
                   vertex_shader = glCreateShader(GL_VERTEX_SHADER)
                   glShaderSource(vertex_shader, vertex_shader_source)
                   glCompileShader(vertex_shader)
                   
                   if not glGetShaderiv(vertex_shader, GL_COMPILE_STATUS):
                       error = glGetShaderInfoLog(vertex_shader).decode()
                       logging.error(f"Vertex shader compilation failed: {error}")
                       return False
                   
                   fragment_shader = glCreateShader(GL_FRAGMENT_SHADER)
                   glShaderSource(fragment_shader, fragment_shader_source)
                   glCompileShader(fragment_shader)
                   
                   if not glGetShaderiv(fragment_shader, GL_COMPILE_STATUS):
                       error = glGetShaderInfoLog(fragment_shader).decode()
                       logging.error(f"Fragment shader compilation failed: {error}")
                       return False
                   
                   self.shader_program = glCreateProgram()
                   glAttachShader(self.shader_program, vertex_shader)
                   glAttachShader(self.shader_program, fragment_shader)
                   glLinkProgram(self.shader_program)
                   
                   if not glGetProgramiv(self.shader_program, GL_LINK_STATUS):
                       error = glGetProgramInfoLog(self.shader_program).decode()
                       logging.error(f"Shader program linking failed: {error}")
                       return False
                   
                   glDeleteShader(vertex_shader)
                   glDeleteShader(fragment_shader)
                   
                   logging.debug("OneshotCharacterTrainVisualizer shaders compiled successfully")
                   return True
                   
               except Exception as e:
                   logging.error(f"Error loading shaders: {e}")
                   return False
       
    1:     def setup_geometry(self):
               """Setup vertex data - EXACTLY like intro_background pattern"""
               try:
                   # Start with NO characters - like intro_background starts empty
                   vertices = []
                   
                   # Create basic structure
                   self.vertices = np.array([0.0], dtype=np.float32)  # Empty but valid
                   
                   # Create and bind VAO
                   self.vao = glGenVertexArrays(1)
                   glBindVertexArray(self.vao)
                   
                   # Create and bind VBO
                   self.vbo = glGenBuffers(1)
                   glBindBuffer(GL_ARRAY_BUFFER, self.vbo)
                   
                   # Reserve space for characters
                   max_chars = 50  # Much smaller number
                   vertex_size = 10 * 4  # 10 floats per vertex * 4 bytes
                   glBufferData(GL_ARRAY_BUFFER, max_chars * vertex_size * 6, None, GL_DYNAMIC_DRAW)  # 6 vertices per quad
                   
                   # Set vertex attributes
                   stride = 10 * 4  # 10 floats per vertex
                   
                   # Position (2 floats)
                   glEnableVertexAttribArray(0)
                   glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, stride, ctypes.c_void_p(0))
                   # Texture coordinates (2 floats)
                   glEnableVertexAttribArray(1)
                   glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, stride, ctypes.c_void_p(2 * 4))
                   # Character code (1 float)
                   glEnableVertexAttribArray(2)
                   glVertexAttribPointer(2, 1, GL_FLOAT, GL_FALSE, stride, ctypes.c_void_p(4 * 4))
                   # Age (1 float)
                   glEnableVertexAttribArray(3)
                   glVertexAttribPointer(3, 1, GL_FLOAT, GL_FALSE, stride, ctypes.c_void_p(5 * 4))
                   # Color (3 floats)
                   glEnableVertexAttribArray(4)
                   glVertexAttribPointer(4, 3, GL_FLOAT, GL_FALSE, stride, ctypes.c_void_p(6 * 4))
                   
                   # Unbind
                   glBindVertexArray(0)
                   glBindBuffer(GL_ARRAY_BUFFER, 0)
                   
                   logging.debug("Character geometry setup complete")
                   return True
                   
               except Exception as e:
                   logging.error(f"Error setting up geometry: {e}")
                   return False
       
    1:     def create_train(self, start_x=None, start_y=None, direction=None):
               """Create a new character train - VERY SIMPLE"""
               current_time = time.time() - self.start_time
               
               # Remove old trains
               self.active_trains = [train for train in self.active_trains 
                                    if (current_time - train['start_time']) < 4.0]
               
               # Don't create if at max
               if len(self.active_trains) >= self.max_trains:
                   self.active_trains.pop(0)
               
               # Simple horizontal movement only
               if random.choice([True, False]):
                   # Left to right
                   start_x = -1.2
                   start_y = random.uniform(-0.5, 0.5)
                   direction = (1.0, 0.0)
               else:
                   # Right to left
                   start_x = 1.2
                   start_y = random.uniform(-0.5, 0.5)
                   direction = (-1.0, 0.0)
               
               # Generate simple characters
               characters = [random.choice(self.charset) for _ in range(8)]  # Only 8 characters
               
               # Create train data
               train = {
                   'start_pos': (start_x, start_y),
                   'direction': direction,
                   'start_time': current_time,
                   'speed': 0.6,  # Fixed speed
                   'characters': characters
               }
               
               self.active_trains.append(train)
               logging.info(f"ðŸš‚ Created SIMPLE train at ({start_x:.2f}, {start_y:.2f})")
       
    1:     def update_vertex_data(self):
               """Update vertex buffer - EXACTLY like intro_background"""
               try:
                   current_time = time.time() - self.start_time
                   vertices = []
                   
                   for train in self.active_trains:
                       train_age = current_time - train['start_time']
                       
                       for char_idx, char in enumerate(train['characters']):
                           char_code = ord(char)
                           
                           # Calculate position
                           base_x, base_y = train['start_pos']
                           dir_x, dir_y = train['direction']
                           
                           # Move train
                           pos_x = base_x + dir_x * train['speed'] * train_age
                           pos_y = base_y + dir_y * train['speed'] * train_age
                           
                           # Offset character
                           char_x = pos_x - dir_x * char_idx * 0.1
                           char_y = pos_y - dir_y * char_idx * 0.1
                           
                           # Color - simple green
                           r, g, b = 0.0, 1.0, 0.3
                           
                           # Create a simple quad for this character
                           size = 0.04
                           
                           # Triangle 1
                           vertices.extend([
                               char_x - size, char_y - size, 0.0, 0.0, float(char_code), train_age, r, g, b, 0.0,  # Bottom-left
                               char_x + size, char_y - size, 1.0, 0.0, float(char_code), train_age, r, g, b, 0.0,  # Bottom-right
                               char_x - size, char_y + size, 0.0, 1.0, float(char_code), train_age, r, g, b, 0.0   # Top-left
                           ])
                           
                           # Triangle 2
                           vertices.extend([
                               char_x + size, char_y - size, 1.0, 0.0, float(char_code), train_age, r, g, b, 0.0,  # Bottom-right
                               char_x + size, char_y + size, 1.0, 1.0, float(char_code), train_age, r, g, b, 0.0,  # Top-right
                               char_x - size, char_y + size, 0.0, 1.0, float(char_code), train_age, r, g, b, 0.0   # Top-left
                           ])
                   
                   if vertices:
                       self.vertices = np.array(vertices, dtype=np.float32)
                       self.vertex_count = len(vertices) // 10
                       
                       # Upload to GPU
                       glBindBuffer(GL_ARRAY_BUFFER, self.vbo)
                       glBufferSubData(GL_ARRAY_BUFFER, 0, self.vertices.nbytes, self.vertices)
                       glBindBuffer(GL_ARRAY_BUFFER, 0)
                   else:
                       self.vertex_count = 0
                   
               except Exception as e:
                   logging.error(f"Error updating vertex data: {e}")
                   self.vertex_count = 0
       
    1:     def paintGL(self):
               """Render - EXACTLY like intro_background pattern"""
               try:
                   if not self.initialized or not self.shader_program:
                       # Fallback rendering
                       glClearColor(0.0, 0.0, 0.0, 0.0)
                       glClear(GL_COLOR_BUFFER_BIT)
                       return
       
                   # Clear with transparent background
                   glClearColor(0.0, 0.0, 0.0, 0.0)
                   glClear(GL_COLOR_BUFFER_BIT)
                   
                   # Update vertex data
                   self.update_vertex_data()
       
                   if self.vertex_count > 0:
                       current_time = time.time() - self.start_time
                       
                       # Use shader program
                       glUseProgram(self.shader_program)
                       
                       # Update uniforms
                       glUniform1f(glGetUniformLocation(self.shader_program, "time"), current_time)
                       glUniform1f(glGetUniformLocation(self.shader_program, "intensity"), self.trail_intensity)
                       
                       # Draw
                       if self.vao:
                           glBindVertexArray(self.vao)
                           glDrawArrays(GL_TRIANGLES, 0, self.vertex_count)
                           glBindVertexArray(0)
                       
                       # Clean up
                       glUseProgram(0)
                   
               except Exception as e:
                   # Only log errors occasionally
                   if not hasattr(self, '_last_error_time') or \
                      time.time() - self._last_error_time > 5:
                       logging.error(f"CharacterTrain paint error: {e}")
                       self._last_error_time = time.time()
       
                   # Fallback rendering
                   glClearColor(0.0, 0.0, 0.0, 0.0)
                   glClear(GL_COLOR_BUFFER_BIT)
       
    1:     def resizeGL(self, width, height):
               """Handle resize"""
               glViewport(0, 0, width, height)
       
    1:     def cleanup(self):
               """Clean up OpenGL resources"""
               try:
                   logging.debug("Cleaning up OneshotCharacterTrainVisualizer")
                   
                   if self.shader_program:
                       try:
                           if glIsProgram(self.shader_program):
                               glDeleteProgram(self.shader_program)
                       except:
                           pass
                       finally:
                           self.shader_program = None
                   
                   if self.vao:
                       try:
                           glDeleteVertexArrays(1, [self.vao])
                       except:
                           pass
                       finally:
                           self.vao = None
                   
                   if self.vbo:
                       try:
                           glDeleteBuffers(1, [self.vbo])
                       except:
                           pass
                       finally:
                           self.vbo = None
                   
                   self.initialized = False
                   self.active_trains = []
                   
               except Exception as e:
                   logging.debug(f"Cleanup error (non-critical): {e}")
       
    1:     def get_controls(self):
               """Return available controls"""
               return {
                   "Speed": {
                       "type": "slider",
                       "min": 20,
                       "max": 300,
                       "value": int(self.speed_multiplier * 100),
                       "default": 100
                   },
                   "Trail Intensity": {
                       "type": "slider",
                       "min": 10,
                       "max": 300,
                       "value": int(self.trail_intensity * 100),
                       "default": 100
                   },
                   "Color Mode": {
                       "type": "slider",
                       "min": 0,
                       "max": 2,
                       "value": self.color_mode,
                       "default": 0
                   }
               }
       
    1:     def update_control(self, name, value):
               """Update control values"""
               try:
                   if name == "Speed":
                       self.speed_multiplier = value / 100.0
                   elif name == "Trail Intensity":
                       self.trail_intensity = value / 100.0
                   elif name == "Color Mode":
                       self.color_mode = int(value)
               except Exception as e:
                   logging.error(f"Error updating control {name}: {e}")
       
    1:     def trigger_action(self, action_name):
               """Handle MIDI triggers"""
               if action_name == "train" or action_name == "character_train":
                   self.create_train()
                   logging.info("ðŸš‚ SIMPLE Character train triggered via MIDI")
