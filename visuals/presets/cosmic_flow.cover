       # TODO: migrate to RenderBackend (ModernGL)
    1: from OpenGL.GL import *
    1: import numpy as np
    1: import ctypes
    1: import time
    1: import random
       
    1: from visuals.base_visualizer import BaseVisualizer
       
    2: class CosmicFlowVisualizer(BaseVisualizer):
    1:     visual_name = "Cosmic Flow"
           
    1:     def __init__(self, *args, **kwargs):
    1:         super().__init__(*args, **kwargs)
    1:         self.shader_program = None
    1:         self.vao = None
    1:         self.vbo = None
    1:         self.start_time = time.time()
               
               # Starfield parameters
    1:         self.num_stars = 2000
    1:         self.speed = 1.0
    1:         self.star_size = 1.0
    1:         self.color_mode = 0
    1:         self.trail_length = 1.0
               
    1:         self.stars = []
    1:         self.initialized = False
       
    1:     def get_controls(self):
    2:         return {
    2:             "Speed": {
    2:                 "type": "slider",
    2:                 "min": 0,
    2:                 "max": 500,
    2:                 "value": int(self.speed * 100),
                   },
    2:             "Star Count": {
    2:                 "type": "slider",
    2:                 "min": 500,
    2:                 "max": 5000,
    2:                 "value": self.num_stars,
                   },
    2:             "Star Size": {
    2:                 "type": "slider",
    2:                 "min": 20,
    2:                 "max": 300,
    2:                 "value": int(self.star_size * 100),
                   },
    2:             "Trail Length": {
    2:                 "type": "slider",
    2:                 "min": 10,
    2:                 "max": 300,
    2:                 "value": int(self.trail_length * 100),
                   },
    2:             "Color Mode": {
    2:                 "type": "dropdown",
    2:                 "options": ["White Stars", "Rainbow", "Blue Shift", "Fire Nebula", "Crystal Galaxy"],
    2:                 "value": self.color_mode,
                   }
               }
       
    1:     def update_control(self, name, value):
               if name == "Speed":
                   self.speed = float(value) / 100.0
               elif name == "Star Count":
                   old_count = self.num_stars
                   self.num_stars = int(value)
                   if old_count != self.num_stars:
                       self.init_stars()
               elif name == "Star Size":
                   self.star_size = float(value) / 100.0
               elif name == "Trail Length":
                   self.trail_length = float(value) / 100.0
               elif name == "Color Mode":
                   self.color_mode = int(value)
       
    1:     def initializeGL(self):
    1:         print("CosmicFlowVisualizer.initializeGL called")
    1:         glClearColor(0.0, 0.0, 0.0, 0.0)
    1:         glEnable(GL_BLEND)
    1:         glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
    1:         glEnable(GL_PROGRAM_POINT_SIZE)
    1:         glDisable(GL_DEPTH_TEST)  # Like working visualizers
       
    1:         if not self.load_shaders():
                   print("Failed to load shaders")
                   return
               
    1:         self.init_stars()
    1:         self.setup_buffers()
    1:         self.initialized = True
    1:         print("CosmicFlow initialized successfully")
       
    1:     def load_shaders(self):
    1:         try:
    1:             vertex_shader_source = """
                   #version 330 core
                   layout (location = 0) in vec3 aPos;
                   layout (location = 1) in vec4 aColor;
                   layout (location = 2) in float aSize;
                   
                   uniform float time;
                   uniform float speed;
                   uniform float star_size;
                   
                   out vec4 vertexColor;
                   
                   void main()
                   {
                       vec3 pos = aPos;
                       
                       // Move stars towards viewer (z approaches 0)
                       pos.z += time * speed * 2.0;
                       
                       // Reset stars that pass the camera
                       if (pos.z > 1.0) {
                           pos.z = -10.0;
                       }
                       
                       // Create perspective effect
                       float perspective = 1.0 / (1.0 - pos.z * 0.1);
                       vec2 screen_pos = pos.xy * perspective;
                       
                       gl_Position = vec4(screen_pos, 0.0, 1.0);
                       
                       // Size based on distance (closer = bigger)
                       float size_factor = perspective * star_size * aSize;
                       gl_PointSize = max(1.0, size_factor * 5.0);
                       
                       // Brightness based on distance
                       vec4 color = aColor;
                       color.a *= min(1.0, perspective * 0.5);
                       
                       vertexColor = color;
                   }
                   """
                   
    1:             fragment_shader_source = """
                   #version 330 core
                   in vec4 vertexColor;
                   out vec4 FragColor;
                   
                   void main()
                   {
                       // Create circular star shape
                       vec2 coord = gl_PointCoord - vec2(0.5);
                       float dist = length(coord);
                       float alpha = 1.0 - smoothstep(0.1, 0.5, dist);
                       
                       // Add bright center
                       float center = 1.0 - smoothstep(0.0, 0.2, dist);
                       alpha = max(alpha * 0.6, center);
                       
                       FragColor = vec4(vertexColor.rgb, vertexColor.a * alpha);
                   }
                   """
                   
                   # Compile vertex shader
    1:             vertex_shader = glCreateShader(GL_VERTEX_SHADER)
    1:             glShaderSource(vertex_shader, vertex_shader_source)
    1:             glCompileShader(vertex_shader)
                   
    1:             if not glGetShaderiv(vertex_shader, GL_COMPILE_STATUS):
                       error = glGetShaderInfoLog(vertex_shader).decode()
                       print(f"Vertex shader error: {error}")
                       return False
                   
                   # Compile fragment shader
    1:             fragment_shader = glCreateShader(GL_FRAGMENT_SHADER)
    1:             glShaderSource(fragment_shader, fragment_shader_source)
    1:             glCompileShader(fragment_shader)
                   
    1:             if not glGetShaderiv(fragment_shader, GL_COMPILE_STATUS):
                       error = glGetShaderInfoLog(fragment_shader).decode()
                       print(f"Fragment shader error: {error}")
                       return False
                   
                   # Link program
    1:             self.shader_program = glCreateProgram()
    1:             glAttachShader(self.shader_program, vertex_shader)
    1:             glAttachShader(self.shader_program, fragment_shader)
    1:             glLinkProgram(self.shader_program)
                   
    1:             if not glGetProgramiv(self.shader_program, GL_LINK_STATUS):
                       error = glGetProgramInfoLog(self.shader_program).decode()
                       print(f"Shader program error: {error}")
                       return False
                   
    1:             glDeleteShader(vertex_shader)
    1:             glDeleteShader(fragment_shader)
                   
    1:             print("CosmicFlow shaders compiled successfully")
    1:             return True
                   
               except Exception as e:
                   print(f"Error loading shaders: {e}")
                   return False
       
    1:     def init_stars(self):
               """Initialize starfield"""
    1:         self.stars = []
               
 2001:         for i in range(self.num_stars):
 2000:             star = {
 2000:                 'x': random.uniform(-2.0, 2.0),
 2000:                 'y': random.uniform(-2.0, 2.0),
 2000:                 'z': random.uniform(-10.0, 1.0),
 2000:                 'size': random.uniform(0.5, 2.0),
 2000:                 'brightness': random.uniform(0.3, 1.0),
 2000:                 'color_offset': random.uniform(0, 6.28)
                   }
 2000:             self.stars.append(star)
       
    1:     def get_star_color(self, star, time_offset):
               """Get star color based on mode"""
236000:         brightness = star['brightness']
               
236000:         if self.color_mode == 0:  # White Stars
236000:             return [brightness, brightness, brightness, 0.9]
               elif self.color_mode == 1:  # Rainbow
                   hue = (star['color_offset'] + time_offset) % 6.28
                   r = brightness * (0.5 + 0.5 * np.sin(hue))
                   g = brightness * (0.5 + 0.5 * np.sin(hue + 2.09))
                   b = brightness * (0.5 + 0.5 * np.sin(hue + 4.18))
                   return [r, g, b, 0.9]
               elif self.color_mode == 2:  # Blue Shift
                   return [brightness * 0.3, brightness * 0.6, brightness, 0.9]
               elif self.color_mode == 3:  # Fire Nebula
                   return [brightness, brightness * 0.5, brightness * 0.1, 0.9]
               else:  # Crystal Galaxy
                   crystal = 0.7 + 0.3 * np.sin(time_offset + star['color_offset'])
                   return [brightness * 0.8 * crystal, brightness * 0.9 * crystal, brightness * crystal, 0.9]
       
    1:     def setup_buffers(self):
    1:         try:
                   # Clean up old buffers
    1:             if self.vao:
                       glDeleteVertexArrays(1, [self.vao])
    1:             if self.vbo:
                       glDeleteBuffers(1, [self.vbo])
                   
                   # Create VAO
    1:             self.vao = glGenVertexArrays(1)
    1:             glBindVertexArray(self.vao)
                   
                   # Create VBO
    1:             self.vbo = glGenBuffers(1)
    1:             glBindBuffer(GL_ARRAY_BUFFER, self.vbo)
                   
                   # Each star: pos(3) + color(4) + size(1) = 8 floats
    1:             buffer_size = self.num_stars * 8 * 4
    1:             glBufferData(GL_ARRAY_BUFFER, buffer_size, None, GL_DYNAMIC_DRAW)
                   
                   # Position attribute
    1:             glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * 4, ctypes.c_void_p(0))
    1:             glEnableVertexAttribArray(0)
                   
                   # Color attribute
    1:             glVertexAttribPointer(1, 4, GL_FLOAT, GL_FALSE, 8 * 4, ctypes.c_void_p(3 * 4))
    1:             glEnableVertexAttribArray(1)
                   
                   # Size attribute
    1:             glVertexAttribPointer(2, 1, GL_FLOAT, GL_FALSE, 8 * 4, ctypes.c_void_p(7 * 4))
    1:             glEnableVertexAttribArray(2)
                   
    1:             glBindVertexArray(0)
                   
    1:             print("CosmicFlow buffers setup complete")
    1:             return True
                   
               except Exception as e:
                   print(f"Error setting up buffers: {e}")
                   return False
       
    1:     def update_stars(self, dt):
               """Update star positions"""
236118:         for star in self.stars:
                   # Move star towards camera
236000:             star['z'] += dt * self.speed * 2.0
                   
                   # Reset star if it passes the camera
236000:             if star['z'] > 1.0:
  711:                 star['z'] = -10.0
  711:                 star['x'] = random.uniform(-2.0, 2.0)
  711:                 star['y'] = random.uniform(-2.0, 2.0)
       
    1:     def paintGL(self):
  118:         try:
  118:             glClear(GL_COLOR_BUFFER_BIT)
                   
  118:             if not self.initialized or not self.shader_program:
                       glClearColor(0.1, 0.0, 0.2, 0.0)
                       glClear(GL_COLOR_BUFFER_BIT)
                       return
                   
                   # Update time
  118:             current_time = time.time() - self.start_time
  118:             dt = 0.016  # Assume 60fps
                   
                   # Update stars
  118:             self.update_stars(dt)
                   
                   # Prepare vertex data
  118:             vertex_data = []
                   
236118:             for star in self.stars:
                       # Position
236000:                 vertex_data.extend([star['x'], star['y'], star['z']])
                       
                       # Color
236000:                 color = self.get_star_color(star, current_time)
236000:                 vertex_data.extend(color)
                       
                       # Size
236000:                 vertex_data.append(star['size'])
                   
                   # Update buffer
  118:             vertex_array = np.array(vertex_data, dtype=np.float32)
  118:             glBindBuffer(GL_ARRAY_BUFFER, self.vbo)
  118:             glBufferSubData(GL_ARRAY_BUFFER, 0, vertex_array.nbytes, vertex_array)
                   
                   # Render
  118:             glUseProgram(self.shader_program)
                   
                   # Set uniforms
  118:             glUniform1f(glGetUniformLocation(self.shader_program, "time"), current_time)
  118:             glUniform1f(glGetUniformLocation(self.shader_program, "speed"), self.speed)
  118:             glUniform1f(glGetUniformLocation(self.shader_program, "star_size"), self.star_size)
                   
                   # Draw stars
  118:             glBindVertexArray(self.vao)
  118:             glDrawArrays(GL_POINTS, 0, len(self.stars))
  118:             glBindVertexArray(0)
                   
  118:             glUseProgram(0)
                   
               except Exception as e:
                   print(f"Error in paintGL: {e}")
                   glClearColor(0.2, 0.0, 0.0, 0.0)
                   glClear(GL_COLOR_BUFFER_BIT)
       
    1:     def resizeGL(self, width, height):
    1:         glViewport(0, 0, width, height)
       
    1:     def cleanup(self):
    1:         print("Cleaning up CosmicFlowVisualizer")
    1:         try:
    1:             if self.shader_program:
    1:                 if glIsProgram(self.shader_program):
    1:                     glDeleteProgram(self.shader_program)
    1:                 self.shader_program = None
    1:             if self.vao:
    1:                 glDeleteVertexArrays(1, [self.vao])
    1:                 self.vao = None
    1:             if self.vbo:
    1:                 glDeleteBuffers(1, [self.vbo])
    1:                 self.vbo = None
               except Exception as e:
                   print(f"Error during cleanup: {e}")
