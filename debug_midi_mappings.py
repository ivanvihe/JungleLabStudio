#!/usr/bin/env python3
"""
Script de depuraci√≥n para verificar que los mappings MIDI se cargan correctamente
Ejecuta este script para diagnosticar problemas con los mappings MIDI
"""

import json
import os
import sys
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

def debug_midi_mappings():
    """Debug completo del sistema de mapeo MIDI"""
    print("üîç INICIANDO DEBUG DE MAPPINGS MIDI")
    print("=" * 60)
    
    # 1. Verificar archivo config/midi_mappings.json
    config_file = 'config/midi_mappings.json'
    print(f"\n1. üìÅ VERIFICANDO ARCHIVO PRINCIPAL: {config_file}")
    
    if os.path.exists(config_file):
        print(f"   ‚úÖ Archivo existe: {config_file}")
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config_mappings = json.load(f)
            
            print(f"   ‚úÖ JSON v√°lido")
            print(f"   üìä Total mappings: {len(config_mappings)}")
            
            # Mostrar algunos mappings de ejemplo
            print(f"\n   üìã MAPPINGS ENCONTRADOS:")
            for i, (action_id, mapping_data) in enumerate(config_mappings.items()):
                if i >= 10:  # Mostrar solo los primeros 10
                    print(f"      ... y {len(config_mappings) - 10} m√°s")
                    break

                if not isinstance(mapping_data, dict):
                    continue

                midi_key = mapping_data.get('midi', 'no_midi')
                action_type = mapping_data.get('type', 'unknown')
                params = mapping_data.get('params', {})
                
                # Extraer informaci√≥n espec√≠fica seg√∫n el tipo
                if action_type == 'load_preset':
                    deck_id = params.get('deck_id', 'N/A')
                    preset_name = params.get('preset_name', 'N/A')
                    print(f"      {action_id}: {midi_key} -> Deck {deck_id}: {preset_name}")
                elif action_type == 'crossfade_action':
                    preset = params.get('preset', 'N/A')
                    duration = params.get('duration', 'N/A')
                    print(f"      {action_id}: {midi_key} -> Mix: {preset} ({duration})")
                else:
                    print(f"      {action_id}: {midi_key} -> {action_type}")
            
            # Verificar mappings espec√≠ficos cr√≠ticos
            print(f"\n   üîç VERIFICANDO MAPPINGS CR√çTICOS:")
            critical_tests = [
                ("note_on_ch0_note37", "Should be Wire Terrain on Deck A"),
                ("note_on_ch0_note60", "Should be Mobius Band on Deck B"),
                ("note_on_ch0_note55", "Should be Wire Terrain on Deck B"),
                ("note_on_ch0_note38", "Should be Abstract Lines on Deck A"),
                ("note_on_ch0_note50", "Should be Mix A to B 5s")
            ]
            
            for midi_key, expected in critical_tests:
                found = False
                for action_id, mapping_data in config_mappings.items():
                    if isinstance(mapping_data, dict) and mapping_data.get('midi') == midi_key:
                        action_type = mapping_data.get('type', 'unknown')
                        params = mapping_data.get('params', {})
                        
                        if action_type == 'load_preset':
                            deck_id = params.get('deck_id', 'N/A')
                            preset_name = params.get('preset_name', 'N/A')
                            actual = f"Deck {deck_id}: {preset_name}"
                        elif action_type == 'crossfade_action':
                            preset = params.get('preset', 'N/A')
                            duration = params.get('duration', 'N/A')
                            actual = f"Mix: {preset} ({duration})"
                        else:
                            actual = f"{action_type}"
                        
                        print(f"      ‚úÖ {midi_key}: {actual}")
                        found = True
                        break
                
                if not found:
                    print(f"      ‚ùå {midi_key}: NOT FOUND (expected: {expected})")
                    
        except json.JSONDecodeError as e:
            print(f"   ‚ùå Error JSON: {e}")
        except Exception as e:
            print(f"   ‚ùå Error leyendo archivo: {e}")
    else:
        print(f"   ‚ùå Archivo NO existe: {config_file}")
    
    # 2. Verificar archivo config/settings.json
    settings_file = 'config/settings.json'
    print(f"\n2. üìÅ VERIFICANDO ARCHIVO SETTINGS: {settings_file}")
    
    if os.path.exists(settings_file):
        print(f"   ‚úÖ Archivo existe: {settings_file}")
        try:
            with open(settings_file, 'r', encoding='utf-8') as f:
                settings = json.load(f)
            
            midi_mappings = settings.get('midi_mappings', {})
            print(f"   üìä MIDI mappings en settings: {len(midi_mappings)}")
            
            if len(midi_mappings) > 0:
                print(f"   ‚ö†Ô∏è  HAY MAPPINGS EN SETTINGS - esto puede causar conflictos")
                # Mostrar algunos
                for i, (action_id, mapping_data) in enumerate(midi_mappings.items()):
                    if i >= 5:
                        print(f"      ... y {len(midi_mappings) - 5} m√°s")
                        break
                    if not isinstance(mapping_data, dict):
                        continue
                    midi_key = mapping_data.get('midi', 'no_midi')
                    print(f"      {action_id}: {midi_key}")
            else:
                print(f"   ‚úÖ No hay mappings conflictivos en settings")
                
        except Exception as e:
            print(f"   ‚ùå Error leyendo settings: {e}")
    else:
        print(f"   ‚ùå Archivo settings NO existe: {settings_file}")
    
    # 3. Verificar estructura de directorios
    print(f"\n3. üìÇ VERIFICANDO ESTRUCTURA DE DIRECTORIOS:")
    
    config_dir = 'config'
    if os.path.exists(config_dir):
        print(f"   ‚úÖ Directorio config/ existe")
        files = os.listdir(config_dir)
        print(f"   üìã Archivos en config/: {files}")
    else:
        print(f"   ‚ùå Directorio config/ NO existe")
    
    # 4. Verificar permisos
    print(f"\n4. üîê VERIFICANDO PERMISOS:")
    
    if os.path.exists(config_file):
        if os.access(config_file, os.R_OK):
            print(f"   ‚úÖ Permiso de lectura en {config_file}")
        else:
            print(f"   ‚ùå SIN permiso de lectura en {config_file}")
            
        if os.access(config_file, os.W_OK):
            print(f"   ‚úÖ Permiso de escritura en {config_file}")
        else:
            print(f"   ‚ùå SIN permiso de escritura en {config_file}")
    
    # 5. Simular carga con settings_manager
    print(f"\n5. üß™ SIMULANDO CARGA CON SETTINGS_MANAGER:")
    
    try:
        # Agregar el directorio padre al path para importar
        sys.path.append('.')
        from utils.settings_manager import SettingsManager
        
        settings_manager = SettingsManager()
        mappings = settings_manager.load_midi_mappings()
        
        print(f"   üìä Mappings cargados por SettingsManager: {len(mappings)}")
        
        if len(mappings) > 0:
            print(f"   ‚úÖ SettingsManager carga mappings correctamente")
            
            # Verificar un mapping espec√≠fico
            test_key = "note_on_ch0_note37"  # Wire Terrain Deck A
            found_mapping = None
            for action_id, mapping_data in mappings.items():
                if isinstance(mapping_data, dict) and mapping_data.get('midi') == test_key:
                    found_mapping = (action_id, mapping_data)
                    break
            
            if found_mapping:
                action_id, mapping_data = found_mapping
                params = mapping_data.get('params', {})
                deck_id = params.get('deck_id', 'N/A')
                preset_name = params.get('preset_name', 'N/A')
                print(f"   ‚úÖ Test mapping {test_key}: Deck {deck_id} -> {preset_name}")
            else:
                print(f"   ‚ùå Test mapping {test_key} NO encontrado")
        else:
            print(f"   ‚ùå SettingsManager NO carga mappings")
            
    except ImportError as e:
        print(f"   ‚ùå Error importando SettingsManager: {e}")
    except Exception as e:
        print(f"   ‚ùå Error simulando carga: {e}")
    
    print("\n" + "=" * 60)
    print("üîç DEBUG COMPLETADO")
    
    # 6. Recomendaciones
    print(f"\nüí° RECOMENDACIONES:")
    print("   1. Aseg√∫rate de que config/midi_mappings.json existe y tiene contenido v√°lido")
    print("   2. Elimina la secci√≥n 'midi_mappings' de config/settings.json si existe")
    print("   3. Verifica que el directorio config/ tiene permisos de lectura/escritura")
    print("   4. Reinicia la aplicaci√≥n despu√©s de hacer cambios")

if __name__ == "__main__":
    debug_midi_mappings()